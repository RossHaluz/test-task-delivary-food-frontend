{"version":3,"file":"static/js/755.8233f3f6.chunk.js","mappings":"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","sources":["components/CartForm/CartForm.styled.jsx","components/CartForm/CartForm.jsx","components/Cart/Cart.styled.jsx","components/Count/Count.styled.jsx","components/Count/Count.jsx","components/Cart/Cart.jsx","pages/CartPage.js"],"sourcesContent":["import { Form, Field, ErrorMessage } from \"formik\";\nimport styled from \"@emotion/styled\";\n\nexport const FormCart = styled(Form)`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    width: 350px;\n`\n\nexport const InputCart = styled(Field)`\n    padding: 20px;\n    font-size: 16px;\n    font-weight: 600;\n    border: 1px solid orange;\n`\n\nexport const BtnCart = styled.button`\n    background-color: #2196f3;\n    border: none;\n    padding: 20px;\n    font-size: 16px;\n    font-weight: 700;\n    color: white;\n    border-radius: 20px;\n    cursor: pointer;\n`\n\nexport const ErrorText = styled(ErrorMessage)`\n    color: red;\n    font-size: 16px;\n`","import { Formik } from 'formik';\nimport { FormCart, InputCart, BtnCart, ErrorText } from './CartForm.styled';\nimport * as yup from 'yup';\nimport { getOrder } from 'redux/orders/operetions';\nimport { useDispatch } from 'react-redux';\n\nconst validateSchema = yup.object({\n  name: yup.string('Type a name').required('Name is require'),\n  phone: yup\n    .number('Type a number')\n    .min(8, 'Number must be min 8 length')\n    .required('Phone is require'),\n  address: yup.string('Type your address').required('Address is require'),\n});\n\nconst CartForm = () => {\n  const dispatch = useDispatch();\n  const initialValue = {\n    name: '',\n    phone: '',\n    address: '',\n  };\n  const onSubmit = (value, { resetForm }) => {\n    dispatch(getOrder(value));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={validateSchema}\n        onSubmit={onSubmit}\n      >\n        <FormCart>\n          <InputCart type=\"text\" name=\"name\" placeholder=\"Type your name\" />\n          <ErrorText component=\"p\" name=\"name\" />\n\n          <InputCart type=\"text\" name=\"phone\" placeholder=\"Type your phone\" />\n\n          <ErrorText component=\"p\" name=\"phone\" />\n          <InputCart\n            type=\"text\"\n            name=\"address\"\n            placeholder=\"Type your address\"\n          />\n\n          <ErrorText component=\"p\" name=\"address\" />\n\n          <BtnCart type=\"submit\">Order now</BtnCart>\n        </FormCart>\n      </Formik>\n    </>\n  );\n};\n\nexport default CartForm;\n","import styled from '@emotion/styled';\n\nexport const CartContainer = styled.div`\n  display: flex;\n  gap: 40px;\n  margin: 0 auto;\n  margin-top: 30px;\n`;\n\nexport const CartOrdersList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const CartOrderItem = styled.li`\n  display: flex;\n  gap: 20px;\n  max-width: 150px;\n`;\n\nexport const OrderDesc = styled.p`\n  margin-top: auto;\n`;\n\nexport const CartOrderDesc = styled.div`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n  width: 200px;\n`;\n\nexport const CartOrderDescContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n`;\nexport const CartOrderDescWrrapper = styled.div`\n  display: flex;\n`;\n\nexport const BtnDeleteOrder = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 18px;\n  color: #030303;\n\n  :hover,\n  :focus {\n    transform: scale(1.2);\n  }\n`;\n\n\nexport const TotalPrice = styled.h3`\n      margin-left: auto;\n    margin-top: 35px;\n`","import styled from \"@emotion/styled\";\n\nexport const CountWrrapper = styled.div`\n        display: flex;\n    align-items: center;\n`\n\nexport const BtnCount = styled.button`\ndisplay: flex;\njustify-content: center;\n    background: none;\n    border: none;\n    font-size: 27px;\n    cursor: pointer\n`","import { useState } from 'react';\nimport { BiLeftArrowCircle, BiRightArrowCircle } from 'react-icons/bi'; \nimport { BtnCount, CountWrrapper } from './Count.styled';\n\nconst Count = ({amount, price}) => {\n  const [count, setCount] = useState(amount);\n\n  const increment = () => {\n    setCount(prev => prev + 1)\n  }\n\n  const decrement = () => {\n    if(count === 1) {\n      return\n    }\n    setCount(prev => prev - 1)\n  }\n\n  return (\n    <CountWrrapper>\n      <BtnCount type=\"button\" onClick={decrement}>\n        <BiLeftArrowCircle />\n      </BtnCount>\n      <span>{count}</span>\n      <BtnCount type=\"button\" onClick={increment}>\n        <BiRightArrowCircle />\n      </BtnCount>\n    </CountWrrapper>\n  );\n};\n\nexport default Count;\n","import CartForm from 'components/CartForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectOrders,\n  selectSuccessOrder,\n  selectTotalPrice,\n} from 'redux/orders/selectors';\nimport {\n  CartContainer,\n  CartOrdersList,\n  CartOrderItem,\n  CartOrderDesc,\n  CartOrderDescContainer,\n  OrderDesc,\n  CartOrderDescWrrapper,\n  BtnDeleteOrder,\n  TotalPrice,\n} from './Cart.styled';\nimport { RiDeleteBin6Line } from 'react-icons/ri';\nimport { deleteItemInCart } from 'redux/orders/slice';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport Count from 'components/Count';\n\nconst Cart = () => {\n  const dispatch = useDispatch();\n  const orders = useSelector(selectOrders);\n  const totalPrice = useSelector(selectTotalPrice);\n  const successOrder = useSelector(selectSuccessOrder);\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <CartContainer>\n        <CartForm />\n        {orders.length === 0 ? (\n          <div>\n            <p>Корзина пуста...</p>\n            <NavLink to=\"/\">Перейти на каталог</NavLink>\n          </div>\n        ) : (\n          <CartOrdersList>\n            {orders.map(({ id, img, title, price, desc, amount }) => {\n              const totalAmount = amount * price;\n              return (\n                <CartOrderItem key={id}>\n                  <img src={img} alt={title} />\n                  <CartOrderDescContainer>\n                    <CartOrderDescWrrapper>\n                      <CartOrderDesc>\n                        <h3>{title}</h3>\n                        <p>{desc}</p>\n                        <Count amount={amount} price={price} />\n                      </CartOrderDesc>\n                      <BtnDeleteOrder\n                        type=\"button\"\n                        onClick={() => dispatch(deleteItemInCart(id))}\n                      >\n                        <RiDeleteBin6Line />\n                      </BtnDeleteOrder>\n                    </CartOrderDescWrrapper>\n                    <OrderDesc>\n                      <strong>Price:</strong> {totalAmount}\n                    </OrderDesc>\n                  </CartOrderDescContainer>\n                </CartOrderItem>\n              );\n            })}\n            <TotalPrice>Total price: {totalPrice}</TotalPrice>\n          </CartOrdersList>\n        )}\n      </CartContainer>\n      {successOrder && navigate('/success-order', { replace: true })}\n    </>\n  );\n};\n\nexport default Cart;\n","import Cart from \"../components/Cart\";\n\nconst CartPage = () => {\n  return <Cart />;\n};\n\nexport default CartPage;\n"],"names":["FormCart","styled","Form","InputCart","Field","BtnCart","ErrorText","ErrorMessage","validateSchema","yup","name","required","phone","min","address","dispatch","useDispatch","initialValues","validationSchema","onSubmit","value","resetForm","getOrder","type","placeholder","component","CartContainer","CartOrdersList","CartOrderItem","OrderDesc","CartOrderDesc","CartOrderDescContainer","CartOrderDescWrrapper","BtnDeleteOrder","TotalPrice","CountWrrapper","BtnCount","amount","price","useState","count","setCount","onClick","prev","orders","useSelector","selectOrders","totalPrice","selectTotalPrice","successOrder","selectSuccessOrder","navigate","useNavigate","length","to","map","id","img","title","desc","totalAmount","src","alt","deleteItemInCart","replace"],"sourceRoot":""}