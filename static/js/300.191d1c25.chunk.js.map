{"version":3,"file":"static/js/300.191d1c25.chunk.js","mappings":"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","sources":["components/CartForm/CartForm.styled.jsx","redux/orders/operetions.js","components/CartForm/CartForm.jsx","redux/orders/selectors.js","components/Cart/Cart.styled.jsx","components/Count/Count.styled.jsx","components/Count/Count.jsx","components/Cart/Cart.jsx","pages/CartPage.js"],"sourcesContent":["import { Form, Field, ErrorMessage } from \"formik\";\nimport styled from \"@emotion/styled\";\n\nexport const FormCart = styled(Form)`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    width: 350px;\n`\n\nexport const InputCart = styled(Field)`\n    padding: 20px;\n    font-size: 16px;\n    font-weight: 600;\n    border: 1px solid orange;\n`\n\nexport const BtnCart = styled.button`\n    background-color: #2196f3;\n    border: none;\n    padding: 20px;\n    font-size: 16px;\n    font-weight: 700;\n    color: white;\n    border-radius: 20px;\n    cursor: pointer;\n`\n\nexport const ErrorText = styled(ErrorMessage)`\n    color: red;\n    font-size: 16px;\n`","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const getOrder = createAsyncThunk(\n  'food/getOrder',\n  async (dataOrder, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.post('/api/food-order', dataOrder);\n      return data;\n    } catch (error) {\n      rejectWithValue(error.message);\n    }\n  }\n);\n","import { Formik } from 'formik';\nimport { FormCart, InputCart, BtnCart, ErrorText } from './CartForm.styled';\nimport * as yup from 'yup';\nimport { getOrder } from 'redux/orders/operetions';\nimport { useDispatch } from 'react-redux';\n\nconst validateSchema = yup.object({\n  name: yup.string('Type a name').required('Name is require'),\n  phone: yup\n    .number('Type a number')\n    .min(8, 'Number must be min 8 length')\n    .required('Phone is require'),\n  address: yup.string('Type your address').required('Address is require'),\n});\n\nconst CartForm = () => {\n  const dispatch = useDispatch();\n  const initialValue = {\n    name: '',\n    phone: '',\n    address: '',\n  };\n  const onSubmit = (value, { resetForm }) => {\n    dispatch(getOrder(value));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={validateSchema}\n        onSubmit={onSubmit}\n      >\n        <FormCart>\n          <InputCart type=\"text\" name=\"name\" placeholder=\"Type your name\" />\n          <ErrorText component=\"p\" name=\"name\" />\n\n          <InputCart type=\"text\" name=\"phone\" placeholder=\"Type your phone\" />\n\n          <ErrorText component=\"p\" name=\"phone\" />\n          <InputCart\n            type=\"text\"\n            name=\"address\"\n            placeholder=\"Type your address\"\n          />\n\n          <ErrorText component=\"p\" name=\"address\" />\n\n          <BtnCart type=\"submit\">Order now</BtnCart>\n        </FormCart>\n      </Formik>\n    </>\n  );\n};\n\nexport default CartForm;\n","export const selectOrders = state => state.cart.orderItems || [];\n\nexport const selectAmount = state => state.cart.orderItems","import styled from '@emotion/styled';\n\nexport const CartContainer = styled.div`\n  display: flex;\n  gap: 40px;\n  margin: 0 auto;\n  margin-top: 30px;\n`;\n\nexport const CartOrdersList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const CartOrderItem = styled.li`\n  display: flex;\n  gap: 20px;\n  max-width: 150px;\n`;\n\nexport const OrderDesc = styled.p`\n  margin-top: auto;\n`;\n\nexport const CartOrderDesc = styled.div`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n  width: 200px;\n`;\n\nexport const CartOrderDescContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n`;\nexport const CartOrderDescWrrapper = styled.div`\n  display: flex;\n`;\n\nexport const BtnDeleteOrder = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 18px;\n\n  :hover,\n  :focus {\n    transform: scale(1.2);\n  }\n`;\n\n\nexport const TotalPrice = styled.h3`\n      margin-left: auto;\n    margin-top: 35px;\n`","import styled from \"@emotion/styled\";\n\nexport const CountWrrapper = styled.div`\n        display: flex;\n    align-items: center;\n`\n\nexport const BtnCount = styled.button`\ndisplay: flex;\njustify-content: center;\n    background: none;\n    border: none;\n    font-size: 27px;\n    cursor: pointer\n`","import { useState } from 'react';\nimport { BiLeftArrowCircle, BiRightArrowCircle } from 'react-icons/bi'; \nimport { BtnCount, CountWrrapper } from './Count.styled';\n\nconst Count = ({amount, setTotalPrice, price}) => {\n  const [count, setCount] = useState(amount);\n\n  const increment = () => {\n    setCount(prev => prev + 1)\nsetTotalPrice(amount * price)\n  }\n\n  const decrement = () => {\n    if(count === 0) {\n      return\n    }\n    setCount(prev => prev - 1)\n    const totalPrice = amount * price;\n    setTotalPrice(totalPrice)\n  }\n\n  return (\n    <CountWrrapper>\n      <BtnCount type=\"button\" onClick={decrement}>\n        <BiLeftArrowCircle />\n      </BtnCount>\n      <span>{count}</span>\n      <BtnCount type=\"button\" onClick={increment}>\n        <BiRightArrowCircle />\n      </BtnCount>\n    </CountWrrapper>\n  );\n};\n\nexport default Count;\n","import CartForm from 'components/CartForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectOrders } from 'redux/orders/selectors';\nimport {\n  CartContainer,\n  CartOrdersList,\n  CartOrderItem,\n  CartOrderDesc,\n  CartOrderDescContainer,\n  OrderDesc,\n  CartOrderDescWrrapper,\n  BtnDeleteOrder,\n  TotalPrice\n} from './Cart.styled';\nimport { RiDeleteBin6Line } from 'react-icons/ri';\nimport { deleteItemInCart } from 'redux/orders/slice';\nimport { NavLink } from 'react-router-dom';\nimport Count from 'components/Count';\nimport { useState } from 'react';\n\nconst Cart = () => {\n  const dispatch = useDispatch();\n  const orders = useSelector(selectOrders);\n  const [total, setTotal] = useState(0);\n\n  const setTotalPrice = price =>{\n    setTotal(price)\n  }\n   \n\n  return (\n    <><CartContainer>\n    <CartForm />\n    {orders.length === 0 ? (\n      <div>\n        <p>Корзина пуста...</p>\n        <NavLink to=\"/\">Перейти на каталог</NavLink>\n      </div>\n    ) : (\n      <>\n        <CartOrdersList>\n          {orders.map(({ id, img, title, price, desc, amount }) => {\n            return (\n              <CartOrderItem key={id}>\n                <img src={img} alt={title} />\n                <CartOrderDescContainer>\n                  <CartOrderDescWrrapper>\n                    <CartOrderDesc>\n                      <h3>{title}</h3>\n                      <p>{desc}</p>\n                      <Count amount={amount} setTotalPrice={setTotalPrice} price={price}/>\n                    </CartOrderDesc>\n                    <BtnDeleteOrder\n                      type=\"button\"\n                      onClick={() => dispatch(deleteItemInCart(id))}\n                    >\n                      <RiDeleteBin6Line />\n                    </BtnDeleteOrder>\n                  </CartOrderDescWrrapper>\n                  <OrderDesc>\n                    <strong>Price:</strong> {price * amount}\n                  </OrderDesc>\n                </CartOrderDescContainer>\n              </CartOrderItem>\n            );\n          })}\n          <TotalPrice>Total price: {total}</TotalPrice>\n        </CartOrdersList>\n      </>\n    )}\n  </CartContainer>\n  </>\n  );\n};\n\nexport default Cart;\n","import Cart from \"../components/Cart\";\n\nconst CartPage = () => {\n  return <Cart />;\n};\n\nexport default CartPage;\n"],"names":["FormCart","styled","Form","InputCart","Field","BtnCart","ErrorText","ErrorMessage","getOrder","createAsyncThunk","dataOrder","rejectWithValue","axios","data","message","validateSchema","yup","name","required","phone","min","address","dispatch","useDispatch","initialValues","validationSchema","onSubmit","value","resetForm","type","placeholder","component","selectOrders","state","cart","orderItems","CartContainer","CartOrdersList","CartOrderItem","OrderDesc","CartOrderDesc","CartOrderDescContainer","CartOrderDescWrrapper","BtnDeleteOrder","TotalPrice","CountWrrapper","BtnCount","amount","setTotalPrice","price","useState","count","setCount","onClick","prev","orders","useSelector","total","setTotal","length","to","map","id","img","title","desc","src","alt","deleteItemInCart"],"sourceRoot":""}